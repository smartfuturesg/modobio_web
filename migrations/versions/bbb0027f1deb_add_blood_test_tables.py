"""Add blood test tables

Revision ID: bbb0027f1deb
Revises: 8dd3ed610f45
Create Date: 2020-10-05 16:06:25.471839

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'bbb0027f1deb'
down_revision = '8dd3ed610f45'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    resultTypes = op.create_table('MedicalBloodTestResultTypes',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('result_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('result_name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('result_id')
    )
    op.create_table('MedicalBloodTests',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('test_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('clientid', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=True),
    sa.Column('panel_type', sa.String(), nullable=True),
    sa.Column('notes', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['clientid'], ['ClientInfo.clientid'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('test_id')
    )
    op.create_table('MedicalBloodTestResults',
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('idx', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('test_id', sa.Integer(), nullable=False),
    sa.Column('result_id', sa.Integer(), nullable=False),
    sa.Column('result_value', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['result_id'], ['MedicalBloodTestResultTypes.result_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['test_id'], ['MedicalBloodTests.test_id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('idx')
    )
    op.drop_table('MedicalBloodChemistryLipids')
    op.drop_table('MedicalBloodChemistryA1C')
    op.drop_table('MedicalBloodChemistryThyroid')
    op.drop_table('MedicalBloodChemistryCBC')
    op.drop_table('MedicalBloodChemistryCMP')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('MobilityAssessment', 'timestamp',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.create_table('MedicalBloodChemistryCMP',
    sa.Column('idx', sa.INTEGER(), server_default=sa.text('nextval(\'"MedicalBloodChemistryCMP_idx_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('clientid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('exam_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('glucose', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('sodium', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('potassium', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('carbon_dioxide', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('chloride', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('magnesium', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('calcium', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('phosphorus', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('uric_acid', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bun', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('creatinine', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ast', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('alt', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('alk_phophatase', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bilirubin', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('protein', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('albumin', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('globulin', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('bunByAlbumin', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['clientid'], ['ClientInfo.clientid'], name='MedicalBloodChemistryCMP_clientid_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('idx', name='MedicalBloodChemistryCMP_pkey')
    )
    op.create_table('MedicalBloodChemistryCBC',
    sa.Column('idx', sa.INTEGER(), server_default=sa.text('nextval(\'"MedicalBloodChemistryCBC_idx_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('clientid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('exam_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('rbc', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('hemoglobin', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('hematocrit', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('mcv', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('mch', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('mchc', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('rdw', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('wbc', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('rel_neutrophils', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('abs_neutrophils', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('rel_lymphocytes', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('abs_lymphocytes', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('rel_monocytes', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('abs_monocytes', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('rel_eosinophils', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('abs_eosinophils', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('basophils', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('platelets', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('plateletsByMch', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('plateletsByLymphocyte', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('neutrophilByLymphocyte', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('lymphocyteByMonocyte', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['clientid'], ['ClientInfo.clientid'], name='MedicalBloodChemistryCBC_clientid_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('idx', name='MedicalBloodChemistryCBC_pkey')
    )
    op.create_table('MedicalBloodChemistryThyroid',
    sa.Column('idx', sa.INTEGER(), server_default=sa.text('nextval(\'"MedicalBloodChemistryThyroid_idx_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('clientid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('exam_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('t3_resin_uptake', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('thyroglobulin', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('thyroidial_iodine_uptake', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('tsh', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('tsi', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('thyroxine_binding_globulin', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('thyroxine_index', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('t4_serum_total', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('t4_serum_free', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('t3_serum_total', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('t3_serum_reverse', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('t3_serum_free', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['clientid'], ['ClientInfo.clientid'], name='BloodThyroid_clientid_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('idx', name='MedicalBloodChemistryThyroid_pkey')
    )
    op.create_table('MedicalBloodChemistryA1C',
    sa.Column('idx', sa.INTEGER(), server_default=sa.text('nextval(\'"MedicalBloodChemistryA1C_idx_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('clientid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('exam_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('a1c', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['clientid'], ['ClientInfo.clientid'], name='BloodA1C_clientid_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('idx', name='MedicalBloodChemistryA1C_pkey')
    )
    op.create_table('MedicalBloodChemistryLipids',
    sa.Column('idx', sa.INTEGER(), server_default=sa.text('nextval(\'"MedicalBloodChemistryLipids_idx_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('clientid', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('exam_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('cholesterol_total', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('cholesterol_ldl', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('cholesterol_hdl', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('triglycerides', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('cholesterol_over_hdl', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('triglycerides_over_hdl', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('ldl_over_hdl', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['clientid'], ['ClientInfo.clientid'], name='BloodLipids_clientid_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('idx', name='MedicalBloodChemistryLipids_pkey')
    )
    op.drop_table('MedicalBloodTestResults')
    op.drop_table('MedicalBloodTests')
    op.drop_table('MedicalBloodTestResultTypes')
    # ### end Alembic commands ###
