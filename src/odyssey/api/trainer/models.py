"""
Database tables for the trainer's portion of the Modo Bio Staff application.
All tables in this module are prefixed with ``Trainer``.
"""
import logging

logger = logging.getLogger(__name__)

from datetime import datetime

from odyssey import db
from odyssey.utils.constants import DB_SERVER_TIME


class PowerAssessment(db.Model):
    """Power assessment table.

    In the power assessment, the average maximum power a client
    can generate is measured relative to body mass. This is measured
    separately for the upper and lower body. The assessment is
    performed on a Keiser machine with pneumatic resistance.
    """

    __tablename__ = "TrainerPowerAssessment"

    idx = db.Column(db.Integer, primary_key=True, autoincrement=True)
    """
    Table index.

    :type: int, primary key, autoincrement
    """

    timestamp = db.Column(db.DateTime, default=DB_SERVER_TIME)
    """
    Timestamp of the assessment.

    :type: :class:`datetime.datetime`
    """

    created_at = db.Column(db.DateTime, default=DB_SERVER_TIME)
    """
    Creation timestamp of this row in the database.

    :type: :class:`datetime.datetime`
    """

    updated_at = db.Column(db.DateTime, default=DB_SERVER_TIME, onupdate=DB_SERVER_TIME)
    """
    Last update timestamp of this row in the database.

    :type: :class:`datetime.datetime`
    """

    user_id = db.Column(
        db.Integer,
        db.ForeignKey("User.user_id", ondelete="CASCADE"),
        nullable=False,
    )
    """
    Client ID number.

    :type: int, foreign key to :attr:`User.user_id <odyssey.models.user.User.user_id>`
    """

    keiser_upper_r_weight = db.Column(db.Integer)
    """
    Keiser push/pull weight (pneumatic, expressed as psi), right.

    :type: int
    :unit: psi
    """

    keiser_upper_r_attempt_1 = db.Column(db.Integer)
    """
    Keiser push/pull max power generated, right, attempt 1 of 3.

    :type: int
    :unit: W
    """

    keiser_upper_r_attempt_2 = db.Column(db.Integer)
    """
    Keiser push/pull max power generated, right, attempt 2 of 3.

    :type: int
    :unit: W
    """

    keiser_upper_r_attempt_3 = db.Column(db.Integer)
    """
    Keiser push/pull max power generated, right, attempt 3 of 3.

    :type: int
    :unit: W
    """

    keiser_upper_l_weight = db.Column(db.Integer)
    """
    Keiser push/pull weight (pneumatic, expressed as psi), left.

    :type: int
    :unit: psi
    """

    keiser_upper_l_attempt_1 = db.Column(db.Integer)
    """
    Keiser push/pull max power generated, left, attempt 1 of 3.

    :type: int
    :unit: W
    """

    keiser_upper_l_attempt_2 = db.Column(db.Integer)
    """
    Keiser push/pull max power generated, left, attempt 2 of 3.

    :type: int
    :unit: W
    """

    keiser_upper_l_attempt_3 = db.Column(db.Integer)
    """
    Keiser push/pull max power generated, left, attempt 3 of 3.

    :type: int
    :unit: W
    """

    keiser_lower_bi_weight = db.Column(db.Integer)
    """
    Keiser leg press weight (pneumatic, expressed as psi), bilateral.

    :type: int
    :unit: psi
    """

    keiser_lower_bi_attempt_1 = db.Column(db.Integer)
    """
    Keiser leg press max power generated, bilateral, attemp 1 of 3.

    :type: int
    :unit: W
    """

    keiser_lower_bi_attempt_2 = db.Column(db.Integer)
    """
    Keiser leg press max power generated, bilateral, attemp 2 of 3.

    :type: int
    :unit: W
    """

    keiser_lower_bi_attempt_3 = db.Column(db.Integer)
    """
    Keiser leg press max power generated, bilateral, attemp 3 of 3.

    :type: int
    :unit: W
    """

    keiser_lower_r_weight = db.Column(db.Integer)
    """
    Keiser leg press weight (pneumatic, expressed as psi), right.

    :type: int
    :unit: psi
    """

    keiser_lower_r_attempt_1 = db.Column(db.Integer)
    """
    Keiser leg press max power generated, right, attempt 1 of 3.

    :type: int
    :unit: W
    """

    keiser_lower_r_attempt_2 = db.Column(db.Integer)
    """
    Keiser leg press max power generated, right, attempt 2 of 3.

    :type: int
    :unit: W
    """

    keiser_lower_r_attempt_3 = db.Column(db.Integer)
    """
    Keiser leg press max power generated, right, attempt 3 of 3.

    :type: int
    :unit: W
    """

    keiser_lower_l_weight = db.Column(db.Integer)
    """
    Keiser leg press weight (pneumatic, expressed as psi), left.

    :type: int
    :unit: psi
    """

    keiser_lower_l_attempt_1 = db.Column(db.Integer)
    """
    Keiser leg press max power generated, left, attempt 1 of 3.

    :type: int
    :unit: W
    """

    keiser_lower_l_attempt_2 = db.Column(db.Integer)
    """
    Keiser leg press max power generated, left, attempt 2 of 3.

    :type: int
    :unit: W
    """

    keiser_lower_l_attempt_3 = db.Column(db.Integer)
    """
    Keiser leg press max power generated, left, attempt 3 of 3.

    :type: int
    :unit: W
    """

    upper_watts_per_kg = db.Column(db.Float)
    """
    Average power generated by the upper body on Keiser push/pull
    exercise (average of left + right), divided by body mass.

    :type: float
    :unit: W/kg
    """

    lower_watts_per_kg = db.Column(db.Float)
    """
    Average power generated by the lower body on Keiser leg press
    exercise (average of left + right or bilateral, whichever was
    testerd), divided by body mass.

    :type: float
    :unit: W/kg
    """


class StrengthAssessment(db.Model):
    """Strength assessment table.

    In the strength assessment, the maximum weight a client can lift
    is measured for the upper and lower body.
    """

    __tablename__ = "TrainerStrengthAssessment"

    idx = db.Column(db.Integer, primary_key=True, autoincrement=True)
    """
    Table index.

    :type: int, primary key, autoincrement
    """

    timestamp = db.Column(db.DateTime, default=DB_SERVER_TIME)
    """
    Timestamp of the assessment.

    :type: :class:`datetime.datetime`
    """

    created_at = db.Column(db.DateTime, default=DB_SERVER_TIME)
    """
    Creation timestamp of this row in the database.

    :type: :class:`datetime.datetime`
    """

    updated_at = db.Column(db.DateTime, default=DB_SERVER_TIME, onupdate=DB_SERVER_TIME)
    """
    Last update timestamp of this row in the database.

    :type: :class:`datetime.datetime`
    """

    user_id = db.Column(
        db.Integer,
        db.ForeignKey("User.user_id", ondelete="CASCADE"),
        nullable=False,
    )
    """
    Client ID number.

    :type: int, foreign key to :attr:`User.user_id <odyssey.models.user.User.user_id>`
    """

    upper_push_notes = db.Column(db.Text)
    """
    Push exercise notes.

    :type: str
    """

    upper_pull_notes = db.Column(db.Text)
    """
    Pull exercise notes.

    :type: str
    """

    upper_push_l_weight = db.Column(db.Integer)
    """
    Weight to be pushed in the 3 attempts to estimate 10RM, left.

    :type: int
    :unit: lb
    """

    upper_push_l_attempt_1 = db.Column(db.Integer)
    """
    Number of reps the weight in :attr:`upper_push_l_weight` is pushed
    until fail, left, attempt 1 of 3.

    :type: int
    :unit: reps
    """

    upper_push_l_attempt_2 = db.Column(db.Integer)
    """
    Number of reps the weight in :attr:`upper_push_l_weight` is pushed
    until fail, left, attempt 2 of 3.

    :type: int
    :unit: reps
    """

    upper_push_l_attempt_3 = db.Column(db.Integer)
    """
    Number of reps the weight in :attr:`upper_push_l_weight` is pushed
    until fail, left, attempt 3 of 3.

    :type: int
    :unit: reps
    """

    upper_push_l_estimated_10rm = db.Column(db.Float)
    """
    Ten rep max, the estimated weight a client can push 10 times,
    upper body, left.

    Uses the average of 3 attempts and a modified Brzycki method
    to estimate the 10RM.

    :type: float
    :unit: lb
    """

    upper_push_r_weight = db.Column(db.Integer)
    """
    Weight to be pushed in the 3 attempts to estimate 10RM, right.

    :type: int
    :unit: lb
    """

    upper_push_r_attempt_1 = db.Column(db.Integer)
    """
    Number of reps the weight in :attr:`upper_push_r_weight` is pushed
    until fail, right, attempt 1 of 3.

    :type: int
    :unit:
    """

    upper_push_r_attempt_2 = db.Column(db.Integer)
    """
    Number of reps the weight in :attr:`upper_push_r_weight` is pushed
    until fail, right, attempt 2 of 3.

    :type: int
    :unit:
    """

    upper_push_r_attempt_3 = db.Column(db.Integer)
    """
    Number of reps the weight in :attr:`upper_push_r_weight` is pushed
    until fail, right, attempt 3 of 3.

    :type: int
    :unit:
    """

    upper_push_r_estimated_10rm = db.Column(db.Float)
    """
    Ten rep max, the estimated weight a client can push 10 times,
    upper body, right.

    Uses the average of 3 attempts and a modified Brzycki method
    to estimate the 10RM.

    :type: float
    :unit: lb
    """

    upper_push_bi_weight = db.Column(db.Integer)
    """
    Weight to be pushed in the 3 attempts to estimate 10RM, bilateral.

    :type: int
    :unit: lb
    """

    upper_push_bi_attempt_1 = db.Column(db.Integer)
    """
    Number of reps the weight in :attr:`upper_push_bi_weight` is pushed
    until fail, bilateral, attempt 1 of 3.

    :type: int
    :unit: reps
    """

    upper_push_bi_attempt_2 = db.Column(db.Integer)
    """
    Number of reps the weight in :attr:`upper_push_bi_weight` is pushed
    until fail, bilateral, attempt 2 of 3.

    :type: int
    :unit: reps
    """

    upper_push_bi_attempt_3 = db.Column(db.Integer)
    """
    Number of reps the weight in :attr:`upper_push_bi_weight` is pushed
    until fail, bilateral, attempt 3 of 3.

    :type: int
    :unit: reps
    """

    upper_push_bi_estimated_10rm = db.Column(db.Float)
    """
    Ten rep max, the estimated weight a client can push 10 times,
    upper body, bilateral.

    Uses the average of 3 attempts and a modified Brzycki method
    to estimate the 10RM.
    
    :type: float
    :unit: lb
    """

    upper_pull_l_weight = db.Column(db.Integer)
    """
    Weight to be pulled in the 3 attempts to estimate 10RM, left.

    :type: int
    :unit: lb
    """

    upper_pull_l_attempt_1 = db.Column(db.Integer)
    """
    Number of reps the weight in :attr:`upper_pull_l_weight` is pulled
    until fail, left, attempt 1 of 3.

    :type: int
    :unit: reps
    """

    upper_pull_l_attempt_2 = db.Column(db.Integer)
    """
    Number of reps the weight in :attr:`upper_pull_l_weight` is pulled
    until fail, left, attempt 2 of 3.

    :type: int
    :unit: reps
    """

    upper_pull_l_attempt_3 = db.Column(db.Integer)
    """
    Number of reps the weight in :attr:`upper_pull_l_weight` is pulled
    until fail, left, attempt 3 of 3.

    :type: int
    :unit: reps
    """

    upper_pull_l_estimated_10rm = db.Column(db.Float)
    """
    Ten rep max, the estimated weight a client can pull 10 times,
    upper body, left.

    Uses the average of 3 attempts and a modified Brzycki method
    to estimate the 10RM.

    :type: float
    :unit: lb
    """

    upper_pull_r_weight = db.Column(db.Integer)
    """
    Weight to be pulled in the 3 attempts to estimate 10RM, right.

    :type: int
    :unit: lb
    """

    upper_pull_r_attempt_1 = db.Column(db.Integer)
    """
    Number of reps the weight in :attr:`upper_pull_r_weight` is pulled
    until fail, right, attempt 1 of 3.

    :type: int
    :unit: reps
    """

    upper_pull_r_attempt_2 = db.Column(db.Integer)
    """
    Number of reps the weight in :attr:`upper_pull_r_weight` is pulled
    until fail, right, attempt 2 of 3.

    :type: int
    :unit: reps
    """

    upper_pull_r_attempt_3 = db.Column(db.Integer)
    """
    Number of reps the weight in :attr:`upper_pull_r_weight` is pulled
    until fail, right, attempt 1 of 3.

    :type: int
    :unit: reps
    """

    upper_pull_r_estimated_10rm = db.Column(db.Float)
    """
    Ten rep max, the estimated weight a client can pull 10 times,
    upper body, right.

    Uses the average of 3 attempts and a modified Brzycki method
    to estimate the 10RM.

    :type: float
    :unit: lb
    """

    upper_pull_bi_weight = db.Column(db.Integer)
    """
    Weight to be pulled in the 3 attempts to estimate 10RM, bilateral.

    :type: int
    :unit: lb
    """

    upper_pull_bi_attempt_1 = db.Column(db.Integer)
    """
    Number of reps the weight in :attr:`upper_pull_bi_weight` is pulled
    until fail, bilateral, attempt 1 of 3.

    :type: int
    :unit: reps
    """

    upper_pull_bi_attempt_2 = db.Column(db.Integer)
    """
    Number of reps the weight in :attr:`upper_pull_bi_weight` is pulled
    until fail, bilateral, attempt 2 of 3.

    :type: int
    :unit: reps
    """

    upper_pull_bi_attempt_3 = db.Column(db.Integer)
    """
    Number of reps the weight in :attr:`upper_pull_bi_weight` is pulled
    until fail, bilateral, attempt 3 of 3.

    :type: int
    :unit: reps
    """

    upper_pull_bi_estimated_10rm = db.Column(db.Float)
    """
    Ten rep max, the estimated weight a client can pull 10 times,
    upper body, bilateral.

    Uses the average of 3 attempts and a modified Brzycki method
    to estimate the 10RM.

    :type: float
    :unit: lb
    """


class MovementAssessment(db.Model):
    """Movement assessment table.

    This set of tests assesses movement through squats and forward bends.
    """

    __tablename__ = "TrainerMovementAssessment"

    idx = db.Column(db.Integer, primary_key=True, autoincrement=True)
    """
    Table index.

    :type: int, primary key, autoincrement
    """

    timestamp = db.Column(db.DateTime, default=DB_SERVER_TIME)
    """
    Timestamp of the assessment.

    :type: :class:`datetime.datetime`
    """

    created_at = db.Column(db.DateTime, default=DB_SERVER_TIME)
    """
    Creation timestamp of this row in the database.

    :type: :class:`datetime.datetime`
    """

    updated_at = db.Column(db.DateTime, default=DB_SERVER_TIME, onupdate=DB_SERVER_TIME)
    """
    Last update timestamp of this row in the database.

    :type: :class:`datetime.datetime`
    """

    user_id = db.Column(
        db.Integer,
        db.ForeignKey("User.user_id", ondelete="CASCADE"),
        nullable=False,
    )
    """
    Client ID number.

    :type: int, foreign key to :attr:`User.user_id <odyssey.models.user.User.user_id>`
    """

    squat_depth = db.Column(db.String)
    """
    Depth of a squat. Qualified as one of the following:

    - above parallel
    - parallel
    - below parallel
    - full depth

    :type: str
    """

    squat_ramp = db.Column(db.String)
    """
    Did a client use a ramp to squat, and how steep?
    Must be one of the following:

    - 30 degree ramp
    - 15 degree ramp
    - no ramp

    :type: str
    """

    squat_eye_test = db.Column(db.Boolean)
    """
    Whether or not the squat was being performed correctly. The trainer
    assesses it by *eye-balling* the client.

    :type: bool
    """

    squat_can_breathe = db.Column(db.Boolean)
    """
    Indicates whether or not a client can breathe while squatting.

    :type: bool
    """

    squat_can_look_up = db.Column(db.Boolean)
    """
    Indicates whether or not a client can look up while squatting

    :type: bool
    """

    toe_touch_depth = db.Column(db.String)
    """
    Indicates depth of a forward bend. One of the following results:

    - knee height
    - mid shin
    - low shin
    - toes
    - floor

    :type: str
    """

    toe_touch_pelvis_movement = db.Column(
        db.ARRAY(db.String),
        nullable=True,
        server_default="{'Even Bilaterally'}",
    )
    """
    Describes pelvis movement during toe touch test.
    Can be any of the following (multiple allowed):

    - right hip high
    - right hip back
    - left hip high
    - left hip back
    - even bilaterally

    :type: str
    """

    toe_touch_ribcage_movement = db.Column(
        db.ARRAY(db.String),
        nullable=True,
        server_default="{'Even Bilaterally'}",
    )
    """
    Describes ribcage movement during toe touch test.
    Can be any of the following (multiple allowed):

    - right posterior ribcage high
    - right posterior ribcage back
    - left posterior ribcage high
    - left posterior ribcage back
    - even bilaterally

    :type: str
    """

    toe_touch_notes = db.Column(db.String)
    """
    Toe touch test notes.

    :type: str
    """

    standing_rotation_r_notes = db.Column(db.String)
    """
    Standing rotation right notes.

    :type: str
    """

    standing_rotation_l_notes = db.Column(db.String)
    """
    Standing rotation right notes.

    :type: str
    """


class HeartAssessment(db.Model):
    """Heart assessment table.

    Assessment of heartrate and breathing capabilities.
    """

    __tablename__ = "TrainerHeartAssessment"

    idx = db.Column(db.Integer, primary_key=True, autoincrement=True)
    """
    Table index.

    :type: int, primary key, autoincrement
    """

    timestamp = db.Column(db.DateTime, default=DB_SERVER_TIME)
    """
    Timestamp of the assessment.

    :type: :class:`datetime.datetime`
    """

    created_at = db.Column(db.DateTime, default=DB_SERVER_TIME)
    """
    Creation timestamp of this row in the database.

    :type: :class:`datetime.datetime`
    """

    updated_at = db.Column(db.DateTime, default=DB_SERVER_TIME, onupdate=DB_SERVER_TIME)
    """
    Last update timestamp of this row in the database.

    :type: :class:`datetime.datetime`
    """

    user_id = db.Column(
        db.Integer,
        db.ForeignKey("User.user_id", ondelete="CASCADE"),
        nullable=False,
    )
    """
    Client ID number.

    :type: int, foreign key to :attr:`User.user_id <odyssey.models.user.User.user_id>`
    """

    resting_hr = db.Column(db.Integer)
    """
    Resting heartrate.

    :type: int
    :unit: bpm
    """

    max_hr = db.Column(db.Integer)
    """
    Maximum measured heartrate.

    :type: int
    :unit: bpm
    """

    theoretical_max_hr = db.Column(db.Integer)
    """
    Theoretical maximum heartrate. This is calculated with:

     .. math:: max_hr = 220 - age

    :type: int
    :unit: bpm
    """

    avg_eval_hr = db.Column(db.Integer)
    """
    Average heartrate during evaluation.

    :type: int
    :unit: bpm
    """

    avg_training_hr = db.Column(db.Integer)
    """
    Avergage heatrate during training.

    :type: int
    :unit: bpm
    """

    estimated_vo2_max = db.Column(db.Integer)
    """
    Estimation of the maximum oxygen consumption rate per body mass per
    minute (VO2 max). The VO2 max is calculated from the :attr:`max_hr`
    or :attr:`theorerical_max_hr`, which ever is higher, and the
    :attr:`resting_hr`:

    .. math:: VO2 max = (max(max_hr, theoretical_max_hr) / resting_hr) * 15.3

    :type: int
    :unit: mL/kg/min
    """

    co2_tolerance = db.Column(db.Integer)
    """
    CO2 tolerance test, duration of slow exhale until next inhale.

    :type: int
    :unit: seconds
    """

    notes = db.Column(db.String)
    """
    Heatrate test notes.

    :type: str
    """


class MoxyAssessment(db.Model):
    """Moxy assessment table.

    A moxy sensor is a device that measures muscle oxygen concentration. It
    is used to determine a client's capacity for short duration full power
    exercise (the size of their "gas tank") and the speed of recovery afterwards.

    In :class:`MoxyRipAssessment`, a specific stationary bike exercise is used to
    perform the moxy test. If a stationary bike is not available, another type of
    exercise may be used to do the moxy test. This table holds results of the
    alternative moxy test, with the test described in the :attr:`notes`.
    """

    __tablename__ = "TrainerMoxyAssessment"

    idx = db.Column(db.Integer, primary_key=True, autoincrement=True)
    """
    Table index.

    :type: int, primary key, autoincrement
    """

    timestamp = db.Column(db.DateTime, default=DB_SERVER_TIME)
    """
    Timestamp of the assessment.

    :type: :class:`datetime.datetime`
    """

    created_at = db.Column(db.DateTime, default=DB_SERVER_TIME)
    """
    Creation timestamp of this row in the database.

    :type: :class:`datetime.datetime`
    """

    updated_at = db.Column(db.DateTime, default=DB_SERVER_TIME, onupdate=DB_SERVER_TIME)
    """
    Last update timestamp of this row in the database.

    :type: :class:`datetime.datetime`
    """

    user_id = db.Column(
        db.Integer,
        db.ForeignKey("User.user_id", ondelete="CASCADE"),
        nullable=False,
    )
    """
    Client ID number.

    :type: int, foreign key to :attr:`User.user_id <odyssey.models.user.User.user_id>`
    """

    vl_side = db.Column(db.String)
    """
    Which vastus lateralus (VL, part of quadriceps in upper leg) the moxy
    sensor is placed on. Either right or left leg.

    :type: str
    """

    notes = db.Column(db.String)
    """
    Moxy test notes. Describes the exercise used to do the moxy test.

    :type: str
    """

    recovery_baseline = db.Column(db.Integer)
    """
    Average peak of repeated moxy test.

    :type: int
    :unit: %
    """

    performance_baseline = db.Column(db.Integer)
    """
    Average valley of repeated moxy test
    
    :type: int
    :unit: %
    """

    gas_tank_size = db.Column(db.Integer)
    """
    Difference of :attr:`recovery_baseline` - :attr:`performance_baseline`.

    :type: int
    :unit: %
    """

    starting_sm_o2 = db.Column(db.Integer)
    """
    Starting value for muscle oxygen level.

    :type: int
    :unit: %
    """

    starting_thb = db.Column(db.Float)
    """
    Starting value for the total hemoglobin.

    :type: float
    :unit: g/dL
    """

    limiter = db.Column(db.String)
    """
    Limiting factor to the "gas tank" size. Must be one of:

    - demand
    - supply
    - respiratory

    :type: str
    """

    intervention = db.Column(db.String)
    """
    Proposed intervention by the trainer to improve the "gas tank" size.

    :type: str
    """

    performance_metric_1 = db.Column(db.String)
    """
    The test described in :attr:`notes` has an asociated unit.
    Free-form, but examples are:

    - watt
    - lb
    - foot/min

    :type: str
    """

    performance_metric_1_value = db.Column(db.Integer)
    """
    The size of the 1st property that is part of the exercise described
    in :attr:`notes`. For example, if a kettle bell exercise is used for
    the moxy test, and :attr:`performance_metric_1` is set to 'lb',
    then the value might be 35 (i.e. 35 lb weight is used).

    :type: int
    :unit: given in :attr:`performance_metric_1`
    """

    performance_metric_2 = db.Column(db.String)
    """
    The test described in :attr:`notes` has an asociated unit.
    Free-form, but examples are:

    - watt
    - lb
    - foot/min

    :type: str
    """

    performance_metric_2_value = db.Column(db.Integer)
    """
    The size of the 2st property that is part of the exercise described
    in :attr:`notes`. For example, if a kettle bell exercise is used for
    the moxy test, with a 35 lb weight (i.e. :attr:`performance_metric_1`
    = 'lb' and :attr:`performance_metric_1_value` = 35), then the 2nd
    property might describe the number of reps.

    :type: int
    :unit: given in :attr:`performance_metric_2`
    """


class MoxyRipTest(db.Model):
    """Moxy rip test table.

    A moxy sensor is a device that measures muscle oxygen concentration. It
    is used to determine a client's capacity for short duration full power
    exercise (the size of their "gas tank") and the speed of recovery afterwards.

    A stationary bike exercise is used to perform the moxy test. The client
    does 4 sprints of 20 s each, with 1:40 min rest in between, while wearing
    a moxy sensor.
    """

    __tablename__ = "TrainerMoxyRipTest"

    idx = db.Column(db.Integer, primary_key=True, autoincrement=True)
    """
    Table index.

    :type: int, primary key, autoincrement
    """

    timestamp = db.Column(db.DateTime, default=DB_SERVER_TIME)
    """
    Timestamp of the assessment.

    :type: :class:`datetime.datetime`
    """

    created_at = db.Column(db.DateTime, default=DB_SERVER_TIME)
    """
    Creation timestamp of this row in the database.

    :type: :class:`datetime.datetime`
    """

    updated_at = db.Column(db.DateTime, default=DB_SERVER_TIME, onupdate=DB_SERVER_TIME)
    """
    Last update timestamp of this row in the database.

    :type: :class:`datetime.datetime`
    """

    user_id = db.Column(
        db.Integer,
        db.ForeignKey("User.user_id", ondelete="CASCADE"),
        nullable=False,
    )
    """
    Client ID number.

    :type: int, foreign key to :attr:`User.user_id <odyssey.models.user.User.user_id>`
    """

    vl_side = db.Column(db.String)
    """
    Which vastus lateralus (VL, part of quadriceps in upper leg) the moxy
    sensor is placed on. Either right or left leg.

    :type: str
    """

    performance_smo2_1 = db.Column(db.Integer)
    """
    Muscle oxygen saturation level (SmO2) after sprint 1.

    :type: int
    :unit: %
    """

    performance_thb_1 = db.Column(db.Float)
    """
    Total hemoglobin level after sprint 1.

    :type: float
    :unit: g/dL
    """

    performance_average_power_1 = db.Column(db.Integer)
    """
    Average power generated during sprint 1.

    :type: int
    :unit: W
    """

    performance_hr_max_1 = db.Column(db.Integer)
    """
    Maximum heartrate during sprint 1.

    :type: int
    :unit: bpm
    """

    performance_smo2_2 = db.Column(db.Integer)
    """
    Muscle oxygen saturation level (SmO2) after sprint 2.

    :type: int
    :unit: %
    """

    performance_thb_2 = db.Column(db.Float)
    """
    Total hemoglobin level after sprint 2.

    :type: float
    :unit: g/dL
    """

    performance_average_power_2 = db.Column(db.Integer)
    """
    Average power generated during sprint 2.

    :type: int
    :unit: W
    """

    performance_hr_max_2 = db.Column(db.Integer)
    """
    Maximum heartrate during sprint 2.

    :type: int
    :unit: bpm
    """

    performance_smo2_3 = db.Column(db.Integer)
    """
    Muscle oxygen saturation level (SmO2) after sprint 3.

    :type: int
    :unit: %
    """

    performance_thb_3 = db.Column(db.Float)
    """
    Total hemoglobin level after sprint 3.

    :type: float
    :unit: g/dL
    """

    performance_average_power_3 = db.Column(db.Integer)
    """
    Average power generated during sprint 3.

    :type: int
    :unit: W
    """

    performance_hr_max_3 = db.Column(db.Integer)
    """
    Maximum heartrate during sprint 3.

    :type: int
    :unit: bpm
    """

    performance_smo2_4 = db.Column(db.Integer)
    """
    Muscle oxygen saturation level (SmO2) after sprint 4.

    :type: int
    :unit: %
    """

    performance_thb_4 = db.Column(db.Float)
    """
    Total hemoglobin level after sprint 4.

    :type: float
    :unit: g/dL
    """

    performance_average_power_4 = db.Column(db.Integer)
    """
    Average power generated during sprint 4.

    :type: int
    :unit: W
    """

    performance_hr_max_4 = db.Column(db.Integer)
    """
    Maximum heartrate during sprint 4.

    :type: int
    :unit: bpm
    """

    recovery_smo2_1 = db.Column(db.Integer)
    """
    Muscle oxygen saturation level (SmO2) after recovery period 1.

    :type: int
    :unit: %
    """

    recovery_thb_1 = db.Column(db.Float)
    """
    Total hemoglobin level after recovery period 1.

    :type: float
    :unit: g/dL
    """

    recovery_average_power_1 = db.Column(db.Integer)
    """
    Average power generated during recovery period 1.

    :type: int
    :unit: W
    """

    recovery_hr_min_1 = db.Column(db.Integer)
    """
    Minimum heartrate during recovery period 1.

    :type: int
    :unit: bpm
    """

    recovery_smo2_2 = db.Column(db.Integer)
    """
    Muscle oxygen saturation level (SmO2) after recovery period 2.

    :type: int
    """

    recovery_thb_2 = db.Column(db.Float)
    """
    Total hemoglobin level after recovery period 2.

    :type: float
    :unit: g/dL
    """

    recovery_average_power_2 = db.Column(db.Integer)
    """
    Average power generated during recovery period 2.

    :type: int
    :unit: W
    """

    recovery_hr_min_2 = db.Column(db.Integer)
    """
    Minimum heartrate during recovery period 2.

    :type: int
    :unit: bpm
    """

    recovery_smo2_3 = db.Column(db.Integer)
    """
    Muscle oxygen saturation level (SmO2) after recovery period 3.

    :type: int
    """

    recovery_thb_3 = db.Column(db.Float)
    """
    Total hemoglobin level after recovery period 3.

    :type: float
    :unit: g/dL
    """

    recovery_average_power_3 = db.Column(db.Integer)
    """
    Average power generated during recovery period 3.

    :type: int
    :unit: W
    """

    recovery_hr_min_3 = db.Column(db.Integer)
    """
    Minimum heartrate during recovery period 3.

    :type: int
    :unit: bpm
    """

    recovery_smo2_4 = db.Column(db.Integer)
    """
    Muscle oxygen saturation level (SmO2) after recovery period 4.

    :type: int
    """

    recovery_thb_4 = db.Column(db.Float)
    """
    Total hemoglobin level after recovery period 4.

    :type: float
    :unit: g/dL
    """

    recovery_average_power_4 = db.Column(db.Integer)
    """
    Average power generated during recovery period 4.

    :type: int
    :unit: W
    """

    recovery_hr_min_4 = db.Column(db.Integer)
    """
    Minimum heartrate during recovery period 4.

    :type: int
    :unit: bpm
    """

    smo2_tank_size = db.Column(db.Integer)
    """
    "Gas tank" size based on muscle oxygen saturation level (SmO2).
    Difference of :attr:`recovery_baseline_smo2` -
    :attr:`performance_baseline_smo2`.

    :type: int
    :unit: %
    """

    thb_tank_size = db.Column(db.Float)
    """
    "Gas tank" size based on total hemoglobin level.
    Difference of :attr:`recovery_baseline_thb` -
    :attr:`performance_baseline_thb`.

    :type: float
    :unit: g/dL
    """

    performance_baseline_smo2 = db.Column(db.Integer)
    """
    Muscle oxygen saturation level (SmO2) after sprint, average of 4 sprints.

    :type: int
    :unit: %
    """

    performance_baseline_thb = db.Column(db.Float)
    """
    Total hemoglobin level after sprint, average of 4 sprints.

    :type: float
    :unit: g/dL
    """

    recovery_baseline_smo2 = db.Column(db.Integer)
    """
    Muscle oxygen saturation level (SmO2) after recovery period, average of 4 periods.

    :type: int
    :unit: %
    """

    recovery_baseline_thb = db.Column(db.Float)
    """
    Total hemoglobin level after recovery period, average of 4 periods.

    :type: float
    :unit: g/dL
    """

    avg_watt_kg = db.Column(db.Float)
    """
    Average power generated per body mass.

    Calculated from average of ``performance_average_power_1-4`` - 
    average of ``recovery_average_power_1-4`` divided by body mass.

    :type: float
    :unit: W/kg
    """

    avg_interval_time = db.Column(db.Integer)
    """
    Duration of the interval, should always be 100 s.

    :type: int
    :unit: s
    """

    avg_recovery_time = db.Column(db.Integer)
    """
    Duration from end of sprint to SmO2 value back at 100 %.
    Average of 4 sprints.

    :type: int
    :unit: s
    """

    limiter = db.Column(db.String)
    """
    Limiting factor to the "gas tank" size. Must be one of:

    - demand
    - supply
    - respiratory

    :type: str
    """

    intervention = db.Column(db.String)
    """
    Proposed intervention by the trainer to improve the "gas tank" size.

    :type: str
    """


class LungAssessment(db.Model):
    """Lung capacity assessment table.

    The lung capacity of a client is measured using a SpiroTiger device.
    The SpiroTiger has an elastic bag which has to be filled by the client
    on every exhale. When the client stops exhaling into the bag, the bag
    automatically empties itself and the client can continue with the
    next exhale. This inhale-exhale cycle continues for a fixed number of
    minutes. The SpiroTiger comes with a set of bags of different volumes.
    The total exhaled volume per minute is calculated.
    """

    __tablename__ = "TrainerLungAssessment"

    idx = db.Column(db.Integer, primary_key=True, autoincrement=True)
    """
    Table index.

    :type: int, primary key, autoincrement
    """

    timestamp = db.Column(db.DateTime, default=DB_SERVER_TIME)
    """
    Timestamp of the assessment.

    :type: :class:`datetime.datetime`
    """

    created_at = db.Column(db.DateTime, default=DB_SERVER_TIME)
    """
    Creation timestamp of this row in the database.

    :type: :class:`datetime.datetime`
    """

    updated_at = db.Column(db.DateTime, default=DB_SERVER_TIME, onupdate=DB_SERVER_TIME)
    """
    Last update timestamp of this row in the database.

    :type: :class:`datetime.datetime`
    """

    user_id = db.Column(
        db.Integer,
        db.ForeignKey("User.user_id", ondelete="CASCADE"),
        nullable=False,
    )
    """
    Client ID number.

    :type: int, foreign key to :attr:`User.user_id <odyssey.models.user.User.user_id>`
    """

    notes = db.Column(db.String)
    """
    Trainer notes on the lung assessment test.

    :type: str
    """

    bag_size = db.Column(db.Float)
    """
    Volume of the SpiroTiger bag used in this assessment.

    :type: float
    :unit: L
    """

    duration = db.Column(db.Integer)
    """
    Duration of the entire test.

    :type: int
    :unit: s
    """

    breaths_per_minute = db.Column(db.Integer)
    """
    Breathing rate.

    :type: int
    :unit: breath/min
    """

    max_minute_volume = db.Column(db.Float)
    """
    Maximum volume per minute.

    :type: float
    :unit: L/min
    """

    liters_min_kg = db.Column(db.Float)
    """
    Maximum volume per minute per body mass.

    :type: float
    :unit: L/min/kg
    """


class FitnessQuestionnaire(db.Model):
    """Fitness questionnaire.

    The fitness questionnaire is filled in by the client on
    first sign up to Modo Bio.
    """

    __tablename__ = "TrainerFitnessQuestionnaire"

    displayname = "Fitness questionnaire"

    idx = db.Column(db.Integer, primary_key=True, autoincrement=True)
    """
    Table index.

    :type: int, primary key, autoincrement
    """

    user_id = db.Column(
        db.Integer,
        db.ForeignKey("User.user_id", ondelete="CASCADE"),
        nullable=False,
    )
    """
    Client ID number.

    :type: int, foreign key to :attr:`User.user_id <odyssey.models.user.User.user_id>`
    """

    timestamp = db.Column(db.DateTime, default=DB_SERVER_TIME)
    """
    Timestamp of the assessment.

    :type: :class:`datetime.datetime`
    """

    created_at = db.Column(db.DateTime, default=DB_SERVER_TIME)
    """
    Creation timestamp of this row in the database.

    :type: :class:`datetime.datetime`
    """

    updated_at = db.Column(db.DateTime, default=DB_SERVER_TIME, onupdate=DB_SERVER_TIME)
    """
    Last update timestamp of this row in the database.

    :type: :class:`datetime.datetime`
    """

    physical_goals = db.Column(
        db.ARRAY(db.String), nullable=True, server_default="{'other'}"
    )
    """
    The goals selected by the client from a predefined list of goals.
    Must be one or more of:

    - weight loss
    - increase strength
    - increase aerobic capacity
    - body composition
    - sport specific performance
    - improve mobility
    - injury rehabilitation
    - injury prevention
    - increase longevity
    - general health
    - other

    :type: str
    """

    current_fitness_level = db.Column(db.Integer, nullable=True)
    """
    Client's current fitness level [1-10].

    :type: int
    """

    goal_fitness_level = db.Column(db.Integer, nullable=True)
    """
    Client's fitness level goal [1-10].
    
    :type: int
    """

    trainer_expectations = db.Column(
        db.ARRAY(db.String), nullable=True, server_default="{'other'}"
    )
    """
    The expectations the client has for the trainer, selected from a
    predefined list of expectations. Must be one or more of:

    - expertise
    - motivation
    - accountability
    - time efficiency
    - other

    :type: str
    """

    lifestyle_goals = db.Column(
        db.ARRAY(db.String), nullable=True, server_default="{'other'}"
    )
    """
    The lifestyle goals the client has. Selected from a predefined list
    of goals. Must be one or more of:

    - increased energy
    - increased mental clarity
    - increased libido
    - overall happiness
    - decreased stress
    - improved sleep
    - healthier eating
    - other

    :type: str
    """

    sleep_hours = db.Column(db.String, nullable=True)
    """
    How many hours the client sleeps on average per night.

    .. note:: This is type ``str`` but should be ``float``.

    :type: str
    :unit: h
    """

    sleep_quality_level = db.Column(db.Integer, nullable=True)
    """
    Client's quality of sleep [1-10].
    
    :type: int
    """

    stress_level = db.Column(db.Integer, nullable=True)
    """
    Client's stress level [1-10].
    
    :type: int
    """

    stress_sources = db.Column(
        db.ARRAY(db.String), nullable=True, server_default="{'other'}"
    )
    """
    Which sources cause the most stress. Selected from a predefined list
    of stress sources. Must be one or more of:

    - family
    - work
    - finances
    - social obligations
    - health
    - relationships
    - school
    - body image
    - sports performance
    - general environment
    - other

    :type: str
    """

    energy_level = db.Column(db.Integer, nullable=True)
    """
    Client's energy level [1-10].
    
    :type: int
    """

    libido_level = db.Column(db.Integer, nullable=True)
    """
    Client's libido level [1-10].
    
    :type: int
    """
