"""relocate tables to lookup

Revision ID: 960495a1dc2b
Revises: 1f5fc0ac6048
Create Date: 2022-06-13 15:53:59.347652

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '960495a1dc2b'
down_revision = '1f5fc0ac6048'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('LookupBloodPressureRanges',
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('idx', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('category', sa.String(), nullable=True),
    sa.Column('systolic', sa.String(), nullable=True),
    sa.Column('and_or', sa.String(), nullable=True),
    sa.Column('diastolic', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('idx')
    )
    op.create_table('LookupBloodTestResultTypes',
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('result_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('result_name', sa.String(), nullable=True),
    sa.Column('normal_min', sa.Float(), nullable=True),
    sa.Column('normal_max', sa.Float(), nullable=True),
    sa.Column('optimal_min', sa.Float(), nullable=True),
    sa.Column('optimal_max', sa.Float(), nullable=True),
    sa.Column('unit', sa.String(), nullable=True),
    sa.Column('panel', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('result_id')
    )
    op.create_table('LookupMedicalConditions',
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('medical_condition_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('category', sa.String(), nullable=True),
    sa.Column('subcategory', sa.String(), nullable=True),
    sa.Column('condition', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('medical_condition_id')
    )
    op.create_table('LookupSTDs',
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('std_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('std', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('std_id')
    )
    op.drop_constraint('MedicalBloodTestResults_result_id_fkey', 'MedicalBloodTestResults', type_='foreignkey')
    op.create_foreign_key(None, 'MedicalBloodTestResults', 'LookupBloodTestResultTypes', ['result_id'], ['result_id'], ondelete='SET NULL')
    op.drop_constraint('MedicalFamilyHistory_medical_condition_id_fkey', 'MedicalFamilyHistory', type_='foreignkey')
    op.create_foreign_key(None, 'MedicalFamilyHistory', 'LookupMedicalConditions', ['medical_condition_id'], ['medical_condition_id'], ondelete='CASCADE')
    op.drop_constraint('MedicalSTDHistory_std_id_fkey', 'MedicalSTDHistory', type_='foreignkey')
    op.create_foreign_key(None, 'MedicalSTDHistory', 'LookupSTDs', ['std_id'], ['std_id'], ondelete='CASCADE')
    op.drop_table('MedicalBloodTestResultTypes')
    op.drop_table('MedicalConditions')
    op.drop_table('MedicalLookUpBloodPressureRange')
    op.drop_table('MedicalLookUpSTD')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'MedicalSTDHistory', type_='foreignkey')
    op.create_foreign_key('MedicalSTDHistory_std_id_fkey', 'MedicalSTDHistory', 'MedicalLookUpSTD', ['std_id'], ['std_id'], ondelete='CASCADE')
    op.drop_constraint(None, 'MedicalFamilyHistory', type_='foreignkey')
    op.create_foreign_key('MedicalFamilyHistory_medical_condition_id_fkey', 'MedicalFamilyHistory', 'MedicalConditions', ['medical_condition_id'], ['medical_condition_id'], ondelete='CASCADE')
    op.drop_constraint(None, 'MedicalBloodTestResults', type_='foreignkey')
    op.create_foreign_key('MedicalBloodTestResults_result_id_fkey', 'MedicalBloodTestResults', 'MedicalBloodTestResultTypes', ['result_id'], ['result_id'], ondelete='SET NULL')
    op.create_table('MedicalLookUpSTD',
    sa.Column('std_id', sa.INTEGER(), server_default=sa.text('nextval(\'"MedicalLookUpSTD_std_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('std', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('clock_timestamp()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('clock_timestamp()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('std_id', name='MedicalLookUpSTD_pkey')
    )
    op.create_table('MedicalLookUpBloodPressureRange',
    sa.Column('idx', sa.INTEGER(), server_default=sa.text('nextval(\'"MedicalLookUpBloodPressureRange_idx_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('category', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('systolic', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('and_or', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('diastolic', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('clock_timestamp()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('clock_timestamp()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('idx', name='MedicalLookUpBloodPressureRange_pkey')
    )
    op.create_table('MedicalConditions',
    sa.Column('medical_condition_id', sa.INTEGER(), server_default=sa.text('nextval(\'"MedicalConditions_medical_condition_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('category', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('subcategory', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('condition', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('clock_timestamp()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('clock_timestamp()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('medical_condition_id', name='MedicalConditions_pkey')
    )
    op.create_table('MedicalBloodTestResultTypes',
    sa.Column('result_id', sa.INTEGER(), server_default=sa.text('nextval(\'"MedicalBloodTestResultTypes_result_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('clock_timestamp()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('clock_timestamp()'), autoincrement=False, nullable=True),
    sa.Column('result_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('normal_min', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('normal_max', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('optimal_min', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('optimal_max', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('unit', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('panel', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('result_id', name='MedicalBloodTestResultTypes_pkey')
    )
    op.drop_table('LookupSTDs')
    op.drop_table('LookupMedicalConditions')
    op.drop_table('LookupBloodTestResultTypes')
    op.drop_table('LookupBloodPressureRanges')
    # ### end Alembic commands ###
