"""
Added:
- LookupEmotes table
- LookupBloodPressureRanges table
- LookupBloodTestResultTypes table
- LookupMedicalConditions table
- LookupSTDs table
- TelehealthStaffSettings.availability_horizon


Updated


Removed
- LookupTransactionTypes table
- ClientTransactionHistory table
- LookupDrinkIngredients
- ClientAssignedDrinks table
- LookupDrinks table
- MedicalBloodTestResultTypes table
- MedicalConditions table
- MedicalLookupBloodPressureRange table
- MedicalLookUpSTD table 
- ClientIndividualContract.drinks

Revision ID: 3fb9896eadc9
Revises: 1882fcff5c14
Create Date: 2022-06-03 15:15:54.588199

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision = '3fb9896eadc9'
down_revision = 'b50b55dbf985'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('LookupEmotes',
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('idx', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('position', sa.Integer(), nullable=True),
    sa.Column('icon_name', sa.String(), nullable=True),
    sa.Column('label', sa.String(), nullable=True),
    sa.Column('title_text', sa.String(), nullable=True),
    sa.Column('content_text', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('idx'),
    sa.UniqueConstraint('position')
    )

    op.add_column('TelehealthStaffSettings', sa.Column('availability_horizon', sa.Integer(), server_default='2', nullable=False))

    op.drop_table('LookupTransactionTypes')

    op.drop_table('ClientTransactionHistory')

    op.drop_table('LookupDrinkIngredients')
    op.drop_table('ClientAssignedDrinks')
    op.drop_table('LookupDrinks')
    op.drop_column('ClientIndividualContract', 'drinks')

    op.create_table('LookupBloodPressureRanges',
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('idx', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('category', sa.String(), nullable=True),
    sa.Column('systolic', sa.String(), nullable=True),
    sa.Column('and_or', sa.String(), nullable=True),
    sa.Column('diastolic', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('idx')
    )
    op.create_table('LookupBloodTestResultTypes',
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('result_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('result_name', sa.String(), nullable=True),
    sa.Column('normal_min', sa.Float(), nullable=True),
    sa.Column('normal_max', sa.Float(), nullable=True),
    sa.Column('optimal_min', sa.Float(), nullable=True),
    sa.Column('optimal_max', sa.Float(), nullable=True),
    sa.Column('unit', sa.String(), nullable=True),
    sa.Column('panel', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('result_id')
    )
    op.create_table('LookupMedicalConditions',
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('medical_condition_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('category', sa.String(), nullable=True),
    sa.Column('subcategory', sa.String(), nullable=True),
    sa.Column('condition', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('medical_condition_id')
    )
    op.create_table('LookupSTDs',
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('clock_timestamp()'), nullable=True),
    sa.Column('std_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('std', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('std_id')
    )
    op.drop_constraint('MedicalBloodTestResults_result_id_fkey', 'MedicalBloodTestResults', type_='foreignkey')
    op.create_foreign_key(None, 'MedicalBloodTestResults', 'LookupBloodTestResultTypes', ['result_id'], ['result_id'], ondelete='SET NULL')
    op.drop_constraint('MedicalFamilyHistory_medical_condition_id_fkey', 'MedicalFamilyHistory', type_='foreignkey')
    op.create_foreign_key(None, 'MedicalFamilyHistory', 'LookupMedicalConditions', ['medical_condition_id'], ['medical_condition_id'], ondelete='CASCADE')
    op.drop_constraint('MedicalSTDHistory_std_id_fkey', 'MedicalSTDHistory', type_='foreignkey')
    op.create_foreign_key(None, 'MedicalSTDHistory', 'LookupSTDs', ['std_id'], ['std_id'], ondelete='CASCADE')
    op.drop_table('MedicalBloodTestResultTypes')
    op.drop_table('MedicalConditions')
    op.drop_table('MedicalLookUpBloodPressureRange')
    op.drop_table('MedicalLookUpSTD')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('LookupEmotes')

    op.drop_column('TelehealthStaffSettings', 'availability_horizon')

    op.create_table('LookupTransactionTypes',
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('clock_timestamp()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('clock_timestamp()'), autoincrement=False, nullable=True),
    sa.Column('idx', sa.INTEGER(), server_default=sa.text('nextval(\'"LookupTransactionTypes_idx_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('category', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('icon', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('idx', name='LookupTransactionTypes_pkey')
    )

    op.create_table('ClientTransactionHistory',
    sa.Column('idx', sa.INTEGER(), server_default=sa.text('nextval(\'"ClientTransactionHistory_idx_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('clock_timestamp()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('clock_timestamp()'), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('price', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('currency', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('payment_method', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['User.user_id'], name='ClientTransactionHistory_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('idx', name='ClientTransactionHistory_pkey')
    )

    op.add_column('ClientIndividualContract', sa.Column('drinks', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.create_table('ClientAssignedDrinks',
    sa.Column('idx', sa.INTEGER(), server_default=sa.text('nextval(\'"ClientAssignedDrinks_idx_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('clock_timestamp()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('clock_timestamp()'), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('drink_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['drink_id'], ['LookupDrinks.drink_id'], name='ClientAssignedDrinks_drink_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['User.user_id'], name='ClientAssignedDrinks_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('idx', name='ClientAssignedDrinks_pkey')
    )
    op.create_table('LookupDrinks',
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('clock_timestamp()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('clock_timestamp()'), autoincrement=False, nullable=True),
    sa.Column('drink_id', sa.INTEGER(), server_default=sa.text('nextval(\'"LookupDrinks_drink_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('primary_goal_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('color', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['primary_goal_id'], ['LookupGoals.goal_id'], name='LookupDrinks_primary_goal_id_fkey'),
    sa.PrimaryKeyConstraint('drink_id', name='LookupDrinks_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('LookupDrinkIngredients',
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('clock_timestamp()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('clock_timestamp()'), autoincrement=False, nullable=True),
    sa.Column('idx', sa.INTEGER(), server_default=sa.text('nextval(\'"LookupDrinkIngredients_idx_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('drink_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_primary_ingredient', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_key_additive', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('ingredient_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('amount', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('unit', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['drink_id'], ['LookupDrinks.drink_id'], name='LookupDrinkIngredients_drink_id_fkey'),
    sa.PrimaryKeyConstraint('idx', name='LookupDrinkIngredients_pkey')
    )

    op.drop_constraint(None, 'MedicalSTDHistory', type_='foreignkey')
    op.create_foreign_key('MedicalSTDHistory_std_id_fkey', 'MedicalSTDHistory', 'MedicalLookUpSTD', ['std_id'], ['std_id'], ondelete='CASCADE')
    op.drop_constraint(None, 'MedicalFamilyHistory', type_='foreignkey')
    op.create_foreign_key('MedicalFamilyHistory_medical_condition_id_fkey', 'MedicalFamilyHistory', 'MedicalConditions', ['medical_condition_id'], ['medical_condition_id'], ondelete='CASCADE')
    op.drop_constraint(None, 'MedicalBloodTestResults', type_='foreignkey')
    op.create_foreign_key('MedicalBloodTestResults_result_id_fkey', 'MedicalBloodTestResults', 'MedicalBloodTestResultTypes', ['result_id'], ['result_id'], ondelete='SET NULL')
    op.create_table('MedicalLookUpSTD',
    sa.Column('std_id', sa.INTEGER(), server_default=sa.text('nextval(\'"MedicalLookUpSTD_std_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('std', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('clock_timestamp()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('clock_timestamp()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('std_id', name='MedicalLookUpSTD_pkey')
    )
    op.create_table('MedicalLookUpBloodPressureRange',
    sa.Column('idx', sa.INTEGER(), server_default=sa.text('nextval(\'"MedicalLookUpBloodPressureRange_idx_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('category', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('systolic', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('and_or', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('diastolic', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('clock_timestamp()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('clock_timestamp()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('idx', name='MedicalLookUpBloodPressureRange_pkey')
    )
    op.create_table('MedicalConditions',
    sa.Column('medical_condition_id', sa.INTEGER(), server_default=sa.text('nextval(\'"MedicalConditions_medical_condition_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('category', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('subcategory', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('condition', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('clock_timestamp()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('clock_timestamp()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('medical_condition_id', name='MedicalConditions_pkey')
    )
    op.create_table('MedicalBloodTestResultTypes',
    sa.Column('result_id', sa.INTEGER(), server_default=sa.text('nextval(\'"MedicalBloodTestResultTypes_result_id_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('clock_timestamp()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('clock_timestamp()'), autoincrement=False, nullable=True),
    sa.Column('result_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('normal_min', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('normal_max', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('optimal_min', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('optimal_max', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('unit', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('panel', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('result_id', name='MedicalBloodTestResultTypes_pkey')
    )
    op.drop_table('LookupSTDs')
    op.drop_table('LookupMedicalConditions')
    op.drop_table('LookupBloodTestResultTypes')
    op.drop_table('LookupBloodPressureRanges')
    # ### end Alembic commands ###
