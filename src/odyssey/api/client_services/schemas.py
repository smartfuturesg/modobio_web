import logging
logger = logging.getLogger(__name__)

from marshmallow import Schema, fields, validate

from odyssey import ma
from odyssey.api.user.models import User, UserLogin


# Don't use user.schemas.User(Login)Schema here,
# need a different set of attributes.
class CSUserSchema(ma.SQLAlchemyAutoSchema):
    class Meta:
        model = User
        exclude = (
            'created_at',
            'updated_at',
            'staff_profile',
            'client_info',
            'is_internal')


class CSUserLoginSchema(ma.SQLAlchemyAutoSchema):
    class Meta:
        model = UserLogin
        exclude = (
            'created_at',
            'updated_at',
            'idx',
            'user_id',
            'password',
            'last_login',
            'refresh_token')


class CSAccountBlockSchema(Schema):
    staff = fields.Boolean(required=True)
    reason = fields.String(required=True, validate=validate.Length(max=500))


class CSAccountUnblockSchema(Schema):
    staff = fields.Boolean(required=True)


##################################################################
#
# Deprecated schemas
#

class NewRemoteRegisterUserSchema(Schema):
    """
    **Deprecated 2022-02-01**

    Schema design for creating a new client as a client_services staff member
    No password is required because the password is generated by the backend and
    returned directly to the new user
    """
    
    firstname = fields.String(required=True)
    middlename = fields.String()
    lastname = fields.String(required=True)
    email = fields.Email(validate=validate.Length(min=0, max=50), required=True)
    phone_number = fields.String(validate=validate.Length(min=0, max=50))
    user_type = fields.String(metadata={'description': 'The type of user being registered. Must be either client or staff'},
                    validate=(validate.OneOf(('client','staff'))), required=True)


class NewUserRegistrationPortalSchema(Schema):
    """
    **Deprecated 2022-02-01**

    Response from client services user registration endpoint
    In practice, only an email will be sent to the new user containing their
    password and registration portal
    """
    password = fields.String(metadata={'description': 'auto-generated password for new user registration'})
    registration_portal_url = fields.String(metadata={'description': 'URL with registration portal_id as parameter'})
    portal_id = fields.String()
